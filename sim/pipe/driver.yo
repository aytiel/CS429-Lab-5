                            | #######################################################################
                            | # Test for copying block of size 64;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42008000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24000000000000000 | 	irmovq $64, %rdx		# src and dst have 64 elements
0x014: 30f69805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 802102000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Alexander Lo atl766
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # 1. I used the iaddq instruction that was implemented in the HCL as IIADDQ. This saves time because it removes an instruction through each iteration. The irmovq instruction is no longer needed.
                            | # 2. I implemented loop unrolling. Using this method, 4 array elements are copied from source to destination at a time. This is important because the method accounts for arbitrary array sizes.
                            | # 3. I used %r8-%r11 to store the values in order to avoid bubbles and data dependencies that could be caused by mrmovq (%rdi), %r8 and rmmovq %r8, (%rsi).
                            | #
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ###################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax, %rax
0x03d: 6222                 | 	andq %rdx, %rdx
0x03f: 712002000000000000   | 	jle Done
0x048: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x052: 722601000000000000   | 	jl endLoop
                            | 
0x05b:                      | Loop:
0x05b: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x065: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x06f: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x079: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x083: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x08d: 6288                 | 	andq %r8, %r8
0x08f: 71a200000000000000   | 	jle Npos1
0x098: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0a2:                      | Npos1:
0x0a2: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0ac: 6299                 | 	andq %r9, %r9
0x0ae: 71c100000000000000   | 	jle Npos2
0x0b7: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0c1:                      | Npos2:
0x0c1: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0cb: 62aa                 | 	andq %r10, %r10
0x0cd: 71e000000000000000   | 	jle Npos3
0x0d6: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0e0:                      | Npos3:
0x0e0: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0ea: 62bb                 | 	andq %r11, %r11
0x0ec: 71ff00000000000000   | 	jle loopAgain
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0ff:                      | loopAgain:
0x0ff: c0f72000000000000000 | 	iaddq $32, %rdi
0x109: c0f62000000000000000 | 	iaddq $32, %rsi
0x113: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x11d: 755b00000000000000   | 	jge Loop
                            | 
0x126:                      | endLoop:
0x126: c0f20400000000000000 | 	iaddq $4, %rdx
                            | 
0x130:                      | pos1:
0x130: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x13a: 722002000000000000   | 	jl Done
0x143: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x14d: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x157: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x161: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x16b: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x175: 6288                 | 	andq %r8, %r8
0x177: 718a01000000000000   | 	jle pos2
0x180: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x18a:                      | pos2:
0x18a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x194: 722002000000000000   | 	jl Done
0x19d: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x1a7: 6299                 | 	andq %r9, %r9
0x1a9: 71bc01000000000000   | 	jle pos3
0x1b2: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1bc:                      | pos3:
0x1bc: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1c6: 722002000000000000   | 	jl Done
0x1cf: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x1d9: 62aa                 | 	andq %r10, %r10
0x1db: 71ee01000000000000   | 	jle pos4
0x1e4: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1ee:                      | pos4:
0x1ee: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1f8: 722002000000000000   | 	jl Done
0x201: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x20b: 62bb                 | 	andq %r11, %r11
0x20d: 712002000000000000   | 	jle Done
0x216: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x220:                      | Done:
0x220: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x221:                      | End:
                            | #/* $end ncopy-ys */
0x221:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 34.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x221:                      | check:
                            | 	# Return value test
0x221: 30fa2200000000000000 | 	irmovq $34,%r10
0x22b: 61a0                 | 	subq %r10,%rax
0x22d: 734902000000000000   | 	je checkb
0x236: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x240: 708703000000000000   | 	jmp cdone
0x249:                      | checkb:
                            | 	# Code length check
0x249: 30f02102000000000000 | 	irmovq EndFun,%rax
0x253: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x25d: 6120                 | 	subq %rdx,%rax
0x25f: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x269: 6102                 | 	subq %rax,%rdx
0x26b: 758702000000000000   | 	jge checkm
0x274: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x27e: 708703000000000000   | 	jmp cdone
0x287:                      | checkm:
0x287: 30f29805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x291: 30f38803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x29b: 30f74000000000000000 | 	irmovq $64,%rdi  # Count
0x2a5: 6277                 | 	andq %rdi,%rdi
0x2a7: 730503000000000000   | 	je checkpre         # Skip check if count = 0
0x2b0:                      | mcloop:
0x2b0: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x2ba: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x2c4: 6160                 | 	subq %rsi,%rax
0x2c6: 73e202000000000000   | 	je  mok
0x2cf: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x2d9: 708703000000000000   | 	jmp cdone
0x2e2:                      | mok:
0x2e2: 30f00800000000000000 | 	irmovq $8,%rax
0x2ec: 6002                 | 	addq %rax,%rdx	  # dest ++
0x2ee: 6003                 | 	addq %rax,%rbx    # src++
0x2f0: 30f00100000000000000 | 	irmovq $1,%rax
0x2fa: 6107                 | 	subq %rax,%rdi    # cnt--
0x2fc: 76b002000000000000   | 	jg mcloop
0x305:                      | checkpre:
                            | 	# Check for corruption
0x305: 30f29005000000000000 | 	irmovq Predest,%rdx
0x30f: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x319: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x323: 6120                 | 	subq %rdx,%rax
0x325: 734103000000000000   | 	je checkpost
0x32e: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x338: 708703000000000000   | 	jmp cdone
0x341:                      | checkpost:
                            | 	# Check for corruption
0x341: 30f29807000000000000 | 	irmovq Postdest,%rdx
0x34b: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x355: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x35f: 6120                 | 	subq %rdx,%rax
0x361: 737d03000000000000   | 	je checkok
0x36a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x374: 708703000000000000   | 	jmp cdone
0x37d:                      | checkok:
                            | 	# Successful checks
0x37d: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x387:                      | cdone:
0x387: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x388:                      | 	.align 8
0x388:                      | src:
0x388: ffffffffffffffff     | 	.quad -1
0x390: 0200000000000000     | 	.quad 2
0x398: fdffffffffffffff     | 	.quad -3
0x3a0: 0400000000000000     | 	.quad 4
0x3a8: 0500000000000000     | 	.quad 5
0x3b0: 0600000000000000     | 	.quad 6
0x3b8: f9ffffffffffffff     | 	.quad -7
0x3c0: 0800000000000000     | 	.quad 8
0x3c8: 0900000000000000     | 	.quad 9
0x3d0: 0a00000000000000     | 	.quad 10
0x3d8: 0b00000000000000     | 	.quad 11
0x3e0: 0c00000000000000     | 	.quad 12
0x3e8: f3ffffffffffffff     | 	.quad -13
0x3f0: 0e00000000000000     | 	.quad 14
0x3f8: 0f00000000000000     | 	.quad 15
0x400: f0ffffffffffffff     | 	.quad -16
0x408: efffffffffffffff     | 	.quad -17
0x410: eeffffffffffffff     | 	.quad -18
0x418: 1300000000000000     | 	.quad 19
0x420: ecffffffffffffff     | 	.quad -20
0x428: 1500000000000000     | 	.quad 21
0x430: 1600000000000000     | 	.quad 22
0x438: 1700000000000000     | 	.quad 23
0x440: e8ffffffffffffff     | 	.quad -24
0x448: e7ffffffffffffff     | 	.quad -25
0x450: e6ffffffffffffff     | 	.quad -26
0x458: 1b00000000000000     | 	.quad 27
0x460: e4ffffffffffffff     | 	.quad -28
0x468: 1d00000000000000     | 	.quad 29
0x470: 1e00000000000000     | 	.quad 30
0x478: 1f00000000000000     | 	.quad 31
0x480: 2000000000000000     | 	.quad 32
0x488: dfffffffffffffff     | 	.quad -33
0x490: 2200000000000000     | 	.quad 34
0x498: ddffffffffffffff     | 	.quad -35
0x4a0: 2400000000000000     | 	.quad 36
0x4a8: dbffffffffffffff     | 	.quad -37
0x4b0: 2600000000000000     | 	.quad 38
0x4b8: d9ffffffffffffff     | 	.quad -39
0x4c0: d8ffffffffffffff     | 	.quad -40
0x4c8: d7ffffffffffffff     | 	.quad -41
0x4d0: d6ffffffffffffff     | 	.quad -42
0x4d8: 2b00000000000000     | 	.quad 43
0x4e0: 2c00000000000000     | 	.quad 44
0x4e8: d3ffffffffffffff     | 	.quad -45
0x4f0: 2e00000000000000     | 	.quad 46
0x4f8: d1ffffffffffffff     | 	.quad -47
0x500: d0ffffffffffffff     | 	.quad -48
0x508: cfffffffffffffff     | 	.quad -49
0x510: ceffffffffffffff     | 	.quad -50
0x518: 3300000000000000     | 	.quad 51
0x520: ccffffffffffffff     | 	.quad -52
0x528: 3500000000000000     | 	.quad 53
0x530: caffffffffffffff     | 	.quad -54
0x538: 3700000000000000     | 	.quad 55
0x540: 3800000000000000     | 	.quad 56
0x548: c7ffffffffffffff     | 	.quad -57
0x550: c6ffffffffffffff     | 	.quad -58
0x558: 3b00000000000000     | 	.quad 59
0x560: c4ffffffffffffff     | 	.quad -60
0x568: 3d00000000000000     | 	.quad 61
0x570: c2ffffffffffffff     | 	.quad -62
0x578: 3f00000000000000     | 	.quad 63
0x580: 4000000000000000     | 	.quad 64
0x588: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x590:                      | 	.align 16
0x590:                      | Predest:
0x590: fadebc0000000000     | 	.quad 0xbcdefa
0x598:                      | dest:
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798:                      | Postdest:
0x798: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7a0:                      | .align 8
                            | # Run time stack
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
                            | 
0x820:                      | Stack:
