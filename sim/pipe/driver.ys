#######################################################################
# Test for copying block of size 64;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $64, %rdx		# src and dst have 64 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Alexander Lo atl766
# Describe how and why you modified the baseline code.
#
# 1. I used the iaddq instruction that was implemented in the HCL as IIADDQ. This saves time because it removes an instruction through each iteration. The irmovq instruction is no longer needed.
# 2. I implemented loop unrolling. Using this method, 4 array elements are copied from source to destination at a time. This is important because the method accounts for arbitrary array sizes.
# 3. I used %r8-%r11 to store the values in order to avoid bubbles and data dependencies that could be caused by mrmovq (%rdi), %r8 and rmmovq %r8, (%rsi).
#
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

###################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax
	andq %rdx, %rdx
	jle Done
	iaddq $-4, %rdx
	jl endLoop

Loop:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle Npos1
	iaddq $1, %rax

Npos1:
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9
	jle Npos2
	iaddq $1, %rax

Npos2:
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle Npos3
	iaddq $1, %rax

Npos3:
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11
	jle loopAgain
	iaddq $1, %rax

loopAgain:
	iaddq $32, %rdi
	iaddq $32, %rsi
	iaddq $-4, %rdx
	jge Loop

endLoop:
	iaddq $4, %rdx

pos1:
	iaddq $-1, %rdx
	jl Done
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle pos2
	iaddq $1, %rax

pos2:
	iaddq $-1, %rdx
	jl Done
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9
	jle pos3
	iaddq $1, %rax

pos3:
	iaddq $-1, %rdx
	jl Done
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle pos4
	iaddq $1, %rax

pos4:
	iaddq $-1, %rdx
	jl Done
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11
	jle Done
	iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 34.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $34,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $64,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 5
	.quad 6
	.quad -7
	.quad 8
	.quad 9
	.quad 10
	.quad 11
	.quad 12
	.quad -13
	.quad 14
	.quad 15
	.quad -16
	.quad -17
	.quad -18
	.quad 19
	.quad -20
	.quad 21
	.quad 22
	.quad 23
	.quad -24
	.quad -25
	.quad -26
	.quad 27
	.quad -28
	.quad 29
	.quad 30
	.quad 31
	.quad 32
	.quad -33
	.quad 34
	.quad -35
	.quad 36
	.quad -37
	.quad 38
	.quad -39
	.quad -40
	.quad -41
	.quad -42
	.quad 43
	.quad 44
	.quad -45
	.quad 46
	.quad -47
	.quad -48
	.quad -49
	.quad -50
	.quad 51
	.quad -52
	.quad 53
	.quad -54
	.quad 55
	.quad 56
	.quad -57
	.quad -58
	.quad 59
	.quad -60
	.quad 61
	.quad -62
	.quad 63
	.quad 64
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
